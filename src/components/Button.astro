---
type ButtonSize = 'lg' | 'md' | 'sm';
type ButtonVariant = 'main' | 'link' | 'icon';

interface Props {
  text: string;
  href: string;
  size: ButtonSize;
  variant: ButtonVariant;
  disabled?: boolean;
  className?: string;
  id?: string;
}

const {
  text,
  size = 'md' as ButtonSize,
  href,
  variant = 'main' as ButtonVariant,
  disabled,
  className,
  id,
  type,
  name,
} = Astro.props as Props;

const getStyles = (variant: ButtonVariant, size: ButtonSize) => {
  const baseStyles = {
    main: {
      lg: `h-[48px] px-[16px] text-h6 font-bold rounded-[16px] bg-btn-main-normal-bg text-btn-main-color hover:bg-btn-main-hover-bg active:bg-btn-main-active-bg`,
      md: `h-[40px] px-[12px] text-h6 font-bold rounded-[16px] bg-btn-main-normal-bg text-btn-main-color hover:bg-btn-main-hover-bg active:bg-btn-main-active-bg`,
      sm: `h-[32px] px-[12px] text-h7 font-bold rounded-[16px] bg-btn-main-normal-bg text-btn-main-color hover:bg-btn-main-hover-bg active:bg-btn-main-active-bg`,
    },
    link: {
      md: `h-[40px] px-[16px] text-h6 font-semibold rounded-[16px] bg-btn-link-normal-bg text-btn-link-color hover:bg-btn-link-hover-bg active:bg-btn-link-active-bg`,
    },
  };

  return `${baseStyles[variant][size]}`;
};
---

<a
  type={type}
  name={name}
  id={id}
  href={disabled ? null : href}
  data-size={size}
  class={`
    w-fit
    flex
    items-center
    justify-center
    font-medium
    ${disabled ? 'cursor-default' : 'cursor-pointer'}
    ${disabled ? '' : 'hover:opacity-90'}
    ${getStyles(variant, size)}
    ${className ?? ''}
   `}
>
  {text}
</a>
