---
type ButtonSize = 'lg' | 'md';
type ButtonVariant = 'main' | 'link';

interface Props {
  text: string;
  href: string;
  size: ButtonSize;
  variant: ButtonVariant;
  disabled?: boolean;
  className?: string;
}

const {
  text,
  size = 'md' as ButtonSize,
  href,
  variant = 'main' as ButtonVariant,
  disabled,
  className,
} = Astro.props as Props;

const getStyles = (
  variant: ButtonVariant,
  size: ButtonSize,
  disabled: boolean,
) => {
  const baseStyles = {
    main: {
      lg: `h-[64px] px-[24px] text-h4 rounded-[8px] ${disabled ? 'bg-btn-main-disabled-bg text-btn-main-disabled-color' : 'bg-btn-main-normal-bg text-btn-main-normal-color'}`,
      md: `h-[52px] px-[24px] text-h6 rounded-[8px] ${disabled ? 'bg-btn-main-disabled-bg text-btn-main-disabled-color' : 'bg-btn-main-normal-bg text-btn-main-normal-color'}`,
    },
    link: {
      lg: `px-[12px] text-h4 rounded-[8px] ${disabled ? 'bg-btn-link-disabled-bg text-btn-link-disabled-color' : 'bg-btn-link-normal-bg text-btn-link-normal-color'}`,
      md: `px-[12px] text-h6 rounded-[8px] ${disabled ? 'bg-btn-link-disabled-bg text-btn-link-disabled-color' : 'bg-btn-link-normal-bg text-btn-link-normal-color'}`,
    },
  };

  return `${baseStyles[variant][size]}`;
};
---

<a
  href={disabled ? null : href}
  class={`
    w-fit
    flex
    items-center
    justify-center
    font-medium
    ${disabled ? 'cursor-default' : 'cursor-pointer'}
    ${disabled ? '' : 'hover:opacity-90'}
    ${getStyles(variant, size, disabled)}
    ${className ?? ''}
   `}
>
  {text}
</a>
